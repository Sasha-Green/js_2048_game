{"version":3,"sources":["scripts/main.js"],"names":["container","document","querySelector","start","gameScore","gameField","tbody","messageContainer","messageStart","messageWin","messageLose","rows","querySelectorAll","cells","map","row","cell","valueCells","textContent","newValueCells","winner","numRows","length","numColumn","checkMove","i","j","transposeFieldCells","evenMove","direction","score","forEach","arrayRow","filterNotEmpty","filter","elem","reverse","arrayCol","splice","Array","fill","col","getEmptyCells","reduce","prev","fillRandom","maxStart","emptyCells","countRandom","index","Math","floor","random","String","nameClass","className","addEventListener","e","fieldCells","find","element","includes","classList","replace","add","key","join","remove"],"mappings":"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","file":"main.06ea6d48.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst container = document.querySelector('.container');\n\nconst start = container.querySelector('.start');\nconst gameScore = container.querySelector('.game-score');\n\nconst gameField = container.querySelector('.game-field');\nconst tbody = gameField.querySelector('tbody');\n\nconst messageContainer = container.querySelector('.message-container');\nconst messageStart = messageContainer.querySelector('.message-start');\nconst messageWin = messageContainer.querySelector('.message-win');\nconst messageLose = messageContainer.querySelector('.message-lose');\n\nconst rows = [...tbody.querySelectorAll('tr')];\nconst cells = rows.map(row => [...row.cells].map(cell => cell));\nlet valueCells = rows.map(row => [...row.cells].map(cell => cell.textContent));\nlet newValueCells = [...valueCells];\n\nlet winner = false;\n\nconst numRows = rows.length;\nconst numColumn = rows[rows.length - 1].cells.length;\n\nstart.addEventListener('click', e => {\n  if (winner) {\n    return;\n  }\n\n  const fieldCells = [...gameField.querySelectorAll('.field-cell')];\n\n  if (fieldCells.find(cell => cell.textContent !== '')) {\n    fieldCells.forEach(element => {\n      element.textContent = '';\n      nameClass(element);\n    });\n\n    valueCells = rows.map(row => [...row.cells].map(cell => cell.textContent));\n  }\n\n  gameScore.textContent = 0;\n  start.textContent = 'Restart';\n\n  if (start.className.includes('start')) {\n    start.classList.replace('start', 'restart');\n  }\n\n  if (!messageLose.className.includes('hidden')) {\n    messageLose.classList.add('hidden');\n  }\n\n  if (!messageWin.className.includes('hidden')) {\n    messageWin.classList.add('hidden');\n  }\n\n  if (!messageStart.className.includes('hidden')) {\n    messageStart.classList.add('hidden');\n  }\n\n  const maxStart = 2;\n  const emptyCells = getEmptyCells();\n\n  fillRandom(maxStart, emptyCells);\n});\n\ndocument.addEventListener('keydown', e => {\n  if (winner) {\n    return;\n  }\n\n  newValueCells = [...valueCells];\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      evenMove('left');\n      break;\n    case 'ArrowRight':\n      evenMove('right');\n      break;\n    case 'ArrowUp':\n      evenMove('up');\n      break;\n    case 'ArrowDown':\n      evenMove('down');\n      break;\n    default:\n      return;\n  }\n\n  if (newValueCells.join() === valueCells.join()) {\n    return;\n  }\n\n  rows.forEach((row, i) => {\n    [...row.cells].forEach((cell, j) => {\n      if (cell.textContent !== newValueCells[i][j]) {\n        cell.textContent = String(newValueCells[i][j]);\n        nameClass(cell);\n      }\n    });\n  });\n\n  if (winner) {\n    messageWin.classList.remove('hidden');\n  }\n\n  valueCells = [...newValueCells];\n\n  const maxStart = 1;\n  const emptyCells = getEmptyCells();\n\n  fillRandom(maxStart, emptyCells);\n\n  if (!emptyCells.length && checkMove()) {\n    messageLose.classList.remove('hidden');\n  }\n});\n\nfunction checkMove() {\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numColumn; j++) {\n      if (newValueCells[i][j] === newValueCells[i][j + 1]) {\n        return false;\n      }\n    }\n  }\n\n  newValueCells = transposeFieldCells();\n\n  for (let i = 0; i < numColumn; i++) {\n    for (let j = 0; j < numRows; j++) {\n      if (newValueCells[i][j] === newValueCells[i][j + 1]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction evenMove(direction) {\n  let score = 0;\n\n  if (direction === 'up' || direction === 'down') {\n    newValueCells = transposeFieldCells();\n  }\n\n  newValueCells.forEach((row, i, arrayRow) => {\n    const filterNotEmpty = row.filter(elem => elem !== '');\n\n    if (filterNotEmpty.length > 0) {\n      if (direction === 'right' || direction === 'down') {\n        filterNotEmpty.reverse();\n      }\n\n      if (filterNotEmpty.length > 1) {\n        filterNotEmpty.forEach((cell, j, arrayCol) => {\n          if (arrayCol[j] === arrayCol[j + 1]) {\n            arrayCol[j] *= 2;\n            score += arrayCol[j];\n            filterNotEmpty.splice(j + 1, 1);\n\n            if (arrayCol[j] === 2048) {\n              winner = true;\n            }\n          }\n        });\n      }\n\n      arrayRow[i] = [...filterNotEmpty,\n        ...Array(numColumn - filterNotEmpty.length).fill('')];\n\n      if (direction === 'right' || direction === 'down') {\n        arrayRow[i].reverse();\n      }\n    }\n  });\n\n  if (direction === 'up' || direction === 'down') {\n    newValueCells = transposeFieldCells();\n  }\n\n  if (score > 0) {\n    gameScore.textContent = +gameScore.textContent + score;\n  }\n}\n\nfunction transposeFieldCells() {\n  return newValueCells[0].map((col, i) => newValueCells.map(row => row[i]));\n}\n\nfunction getEmptyCells() {\n  return valueCells.reduce((prev, row, i) => {\n    return [...prev, ...row.map((cell, j) => {\n      if (cell === '') {\n        return [i, j];\n      }\n    })];\n  }, []).filter(cell => cell);\n}\n\nfunction fillRandom(maxStart, emptyCells) {\n  if (!emptyCells.length) {\n    return;\n  }\n\n  let countRandom = 0;\n\n  while (countRandom < maxStart) {\n    const index = Math.floor(Math.random() * emptyCells.length);\n    const [i, j] = emptyCells[index];\n\n    valueCells[i][j] = Math.random() > 0.9 ? 4 : 2;\n\n    cells[i][j].textContent = String(valueCells[i][j]);\n    nameClass(cells[i][j]);\n\n    countRandom++;\n\n    emptyCells.splice(index, 1);\n  }\n}\n\nfunction nameClass(cell) {\n  if (cell.textContent === '') {\n    cell.className = 'field-cell';\n\n    return;\n  }\n\n  cell.className = `field-cell field-cell--${cell.textContent}`;\n}\n"]}